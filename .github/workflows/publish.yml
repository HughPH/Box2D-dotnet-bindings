name: Build & publish Box2D‑CSharp bindings

on:
    push:
        branches: [ "**" ]
    workflow_dispatch:


# -----------------------------------------------------------------------------
# Global constants
# -----------------------------------------------------------------------------
env:
    BOX2D_REPO: erincatto/box2d
    NUGET_FEED: https://api.nuget.org/v3/index.json

# -----------------------------------------------------------------------------
# Job 1 ─ Detect upstream tag & compute NuGet version (no cache probe anymore)
# -----------------------------------------------------------------------------
jobs:
    detect-tag:
        name: Detect Box2D tag & compute version
        runs-on: ubuntu-latest
        env:
            GH_TOKEN: ${{ github.token }}
        permissions:
            contents: read
        outputs:
            box2d_tag: ${{ steps.tag.outputs.tag }}
            pkg_ver: ${{ steps.version.outputs.value }}
        steps:
            # ───────────── Latest upstream release tag ─────────────
            -   id: tag
                name: "Fetch latest Box2D release tag"
                run: |
                    tag=$(gh api /repos/$BOX2D_REPO/releases/latest --jq .tag_name)
                    echo "tag=$tag" >> "$GITHUB_OUTPUT"
            
            # ───────────── Compute package version once per run ─────────────
            -   id: version
                name: "Compute managed package version string"
                run: |
                    ts=$(date -u '+%Y.%m.%d.%H%M')
                    branch="${GITHUB_REF_NAME##*/}"
                    if [ "$branch" = "main" ] || [ "$branch" = "master" ]; then
                      version="$ts"
                    else
                      safe_branch=$(echo "$branch" | tr '/ "' '--')
                      version="$ts-$safe_branch"
                    fi
                    echo "value=$version" >> "$GITHUB_OUTPUT"
    
    # -----------------------------------------------------------------------------
    # Job 2 ─ Build (or reuse) Box2D native libs for every supported target
    # -----------------------------------------------------------------------------
    build-box2d:
        name: Build / retrieve Box2D native libs
        needs: detect-tag
        strategy:
            matrix:
                include:
                    # Linux x64
                    -   target: linux-x64
                        runs_on: ubuntu-latest
                        cmake_flags: >
                            -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBOX2D_SAMPLES=OFF -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=bin -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=bin -DCMAKE_C_FLAGS="-Wno-error=maybe-uninitialized"
                    
                    # Linux x86 (cross‑compile)
                    -   target: linux-x86
                        runs_on: ubuntu-latest
                        cmake_flags: >
                            -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBOX2D_SAMPLES=OFF -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=bin -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=bin -DCMAKE_C_FLAGS="-m32 -msse2 -Wno-error -Wno-error=maybe-uninitialized -Wno-error=psabi"
                    
                    # Linux ARM64
                    -   target: linux-arm64
                        runs_on: ubuntu-22.04-arm64
                        cmake_flags: >
                            -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBOX2D_SAMPLES=OFF -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=bin -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=bin -DCMAKE_C_FLAGS="-Wno-error=maybe-uninitialized"
                    
                    # Windows x64
                    -   target: win-x64
                        runs_on: windows-latest
                        cmake_flags: >
                            -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBOX2D_SAMPLES=OFF
                    
                    # Windows x86
                    -   target: win-x86
                        runs_on: windows-latest
                        cmake_flags: >
                            -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBOX2D_SAMPLES=OFF -DCMAKE_GENERATOR_PLATFORM=Win32 -DCMAKE_C_FLAGS="/wd4738" -DCMAKE_CXX_FLAGS="/wd4738"
                    
                    # Windows ARM64
                    -   target: win-arm64
                        runs_on: windows-latest
                        cmake_flags: >
                            -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBOX2D_SAMPLES=OFF -DCMAKE_GENERATOR_PLATFORM=ARM64 -DCMAKE_C_FLAGS="/wd4738" -DCMAKE_CXX_FLAGS="/wd4738"
                    
                    # macOS x64
                    -   target: osx-x64
                        runs_on: macos-13
                        cmake_flags: >
                            -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBOX2D_SAMPLES=OFF -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=bin -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=bin
                    
                    # macOS ARM64
                    -   target: osx-arm64
                        runs_on: macos-14
                        cmake_flags: >
                            -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBOX2D_SAMPLES=OFF -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=bin -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=bin
        runs-on: ${{ matrix.runs_on }}
        
        concurrency:
            group: box2d-${{ matrix.target }}
            cancel-in-progress: false
        
        steps:
            -   uses: actions/checkout@v4
            
            # Install 32‑bit toolchain when building linux‑x86
            -   name: "Install gcc‑multilib for 32‑bit build"
                if: matrix.target == 'linux-x86' && steps.cache.outputs.cache-hit != 'true'
                run: sudo apt-get update && sudo apt-get install --no-install-recommends -y gcc-multilib g++-multilib

            -   id: cache
                name: Restore native build cache
                uses: actions/cache@v4
                with:
                    path: box2d-build
                    key: ${{ matrix.target }}-${{ needs.detect-tag.outputs.box2d_tag }}
                    restore-keys: |
                        ${{ matrix.target }}-

            -   name: "Clone Box2D ${{ needs.detect-tag.outputs.box2d_tag }}"
                if: steps.cache.outputs.cache-hit != 'true'
                run: git clone --depth 1 --branch "${{ needs.detect-tag.outputs.box2d_tag }}" https://github.com/${{ env.BOX2D_REPO }} box2d-src

            -   name: "Configure & compile Box2D"
                if: steps.cache.outputs.cache-hit != 'true'
                run: |
                    cmake -S box2d-src -B box2d-build ${{ matrix.cmake_flags }}
                    cmake --build box2d-build --config Release --parallel

            -   name: Prepare artefact directory
                run: |
                    mkdir -p artefact/${{ matrix.target }}
                    if [ -f box2d-build/bin/libbox2d.so ]; then
                      cp box2d-build/bin/libbox2d.so artefact/${{ matrix.target }}/
                    fi
                    if [ -f box2d-build/bin/libbox2d.dylib ]; then
                      cp box2d-build/bin/libbox2d.dylib artefact/${{ matrix.target }}/
                    fi
                    if [ -f box2d-build/bin/box2d.dll ]; then
                      cp box2d-build/bin/box2d.dll artefact/${{ matrix.target }}/
                    fi

            -   name: Upload artefacts
                uses: actions/upload-artifact@v4
                with:
                    name: box2d-${{ needs.detect-tag.outputs.box2d_tag }}-${{ matrix.target }}
                    path: artefact/
                    retention-days: 7
    
    # -----------------------------------------------------------------------------
    # Job 3 ─ Build & publish the managed C# bindings package
    # -----------------------------------------------------------------------------
    publish-bindings:
        name: Build & publish C# bindings
        needs: [ detect-tag, build-box2d ]
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        steps:
            -   uses: actions/checkout@v4

            -   name: "Download native libs"
                uses: actions/download-artifact@v4
                with:
                    path: native-libs
                    pattern: |
                        box2d-${{ needs.detect-tag.outputs.box2d_tag }}-linux-x64
                        box2d-${{ needs.detect-tag.outputs.box2d_tag }}-linux-x86
                        box2d-${{ needs.detect-tag.outputs.box2d_tag }}-linux-arm64
                        box2d-${{ needs.detect-tag.outputs.box2d_tag }}-windows-x64
                        box2d-${{ needs.detect-tag.outputs.box2d_tag }}-windows-x86
                        box2d-${{ needs.detect-tag.outputs.box2d_tag }}-windows-arm64
                        box2d-${{ needs.detect-tag.outputs.box2d_tag }}-macos-x64
                        box2d-${{ needs.detect-tag.outputs.box2d_tag }}-macos-arm64

            -   name: Setup dotnet
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: 9.0.x

            -   name: Build UnitTests project
                run: dotnet build src/UnitTests --configuration Release

            -   name: Show native libs
                run: find native-libs -type f | grep box2d

            -   name: Copy Linux shared library to UnitTests output
                run: cp native-libs/libbox2d.so src/UnitTests/bin/Release/net9.0/

            -   name: Run UnitTests
                run: dotnet test src/UnitTests --configuration Release --no-build --logger trx --results-directory TestResults

            -   name: "Pack & push to NuGet"
                env:
                    NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
                run: |
                    dotnet pack src/Box2DBindings \
                      -p:NativeLibPath=native-libs \
                      -p:Version=${{ needs.detect-tag.outputs.pkg_ver }} \
                      -c Release
#                  dotnet nuget push src/Box2DBindings/bin/Release/*.nupkg \
#                    --api-key "$NUGET_API_KEY" \
#                    --source "$NUGET_FEED"
